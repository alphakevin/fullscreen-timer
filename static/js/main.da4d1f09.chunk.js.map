{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pad","n","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","key","toggleFullScreen","resetTimer","switchMode","handleCursorMove","toLowerCase","replace","toggleEditing","pauseTimer","state","t","paused","countdown","fullscreen","adjusting","editing","showCursor","timer","_this2","setInterval","tick","window","addEventListener","clearInterval","removeEventListener","_this$state","setState","prevState","document","exitFullscreen","documentElement","requestFullscreen","direction","objectSpread","_this3","_this$state2","second","parseInt","minute","react_default","a","createElement","className","clsx","show-cursor","onDoubleClick","Fragment","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da4d1f09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport clsx from 'clsx';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst pad = (n) => (n < 10)? `0${n}` : n;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      t: 0,\n      paused: true,\n      countdown: false,\n      fullscreen: false,\n      adjusting: false,\n      editing: null, // minute, second, null\n      showCursor: false,\n    }\n    this.timer = null;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 500);\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillMount() {\n    clearInterval(this.timer);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  tick() {\n    const { countdown, paused, showCursor, editing } = this.state;\n    if (editing) {\n      this.setState({ showCursor: !showCursor });\n    }\n    if (paused) return;\n    this.setState((prevState) => {\n      const t = prevState.t + (countdown ? -1 : 1) * 0.5;\n      if (t <= 0) {\n        return {\n          t: 0,\n          paused: true,\n        }\n      } else {\n        return {\n          t,\n        }\n      }\n    });\n  }\n\n  toggleFullScreen() {\n    const { fullscreen } = this.state;\n    if (!fullscreen) {\n      document.documentElement.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen(); \n      }\n    }\n    this.setState({ fullscreen: !fullscreen });\n  }\n\n  resetTimer() {\n    this.setState({\n      t: 0,\n      paused: true\n    });\n  }\n\n  switchMode() {\n    this.setState({\n      countdown: !this.state.countdown\n    })\n  }\n\n  pauseTimer() {\n    this.setState({\n      paused: !this.state.paused,\n      editing: false,\n    })\n  }\n\n  toggleEditing() {\n    const { editing } = this.state;\n    this.setState({\n      editing: editing ? null : 'second',\n    });\n  }\n\n  handleCursorMove(direction) {\n    const state = { ...this.state };\n    state.paused = true;\n    switch (direction) {\n      case 'up':\n      case 'down':\n        if (!state.editing) {\n          state.editing = 'second';\n        }\n        state.t += (direction === 'up' ? 1 : -1) * (state.editing === 'second' ? 1 : 60);\n        if (state.t < 0) {\n          state.t = 0;\n        }\n        break;\n      case 'left':\n        state.editing = 'minute';\n        break;\n      case 'right':\n        state.editing = 'second';\n        break;\n      default:\n        break;\n    }\n    this.setState(state);\n  }\n\n  handleKeyDown = (event) => {\n    switch (event.key) {\n      case 'F':\n      case 'f':\n        this.toggleFullScreen();\n        break;\n      case 'R':\n      case 'r':\n        this.resetTimer();\n        break;\n      case 'S':\n      case 's':\n        this.switchMode();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        this.handleCursorMove(event.key.toLowerCase().replace('arrow', ''))\n        break;\n      case 'Enter':\n        this.toggleEditing();\n        break;\n      case ' ':\n        this.pauseTimer();\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const { t, paused, editing, countdown, showCursor, fullscreen } = this.state;\n    const second = parseInt(t % 60);\n    const minute = parseInt((t - second) / 60);\n    return (\n      <div className=\"App\">\n        <div\n          className={clsx('clock', { 'show-cursor': showCursor })}\n          onDoubleClick={() => this.toggleFullScreen()}\n        >\n          <span className={clsx('time minute', { editing: editing === 'minute' })}>{pad(minute)}</span>\n          :\n          <span className={clsx('time second', { editing: editing === 'second' })}>{pad(second)}</span>\n        </div>\n        <ul className=\"tips\">\n          <li><kbd>F</kbd> - {fullscreen ? 'exit': 'enter'} fullscreen</li>\n          <li><kbd>←</kbd> <kbd>→</kbd> <kbd>↑</kbd> <kbd>↓</kbd> - edit timer</li>\n          <li><kbd>R</kbd> - reset timer</li>\n          <li><kbd>S</kbd> - {countdown ? <><b>countdown</b> or stopwatch</> : <>countdown or <b>stopwatch</b></>}</li>\n          <li><kbd>Space</kbd> - {paused ? 'start' : 'pause'} timer</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}